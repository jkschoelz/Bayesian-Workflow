knitr::opts_chunk$set(
include = TRUE,
cache = TRUE,
collapse = TRUE,
echo = FALSE,
message = FALSE,
tidy = FALSE,
warning = FALSE,
comment = "  ",
dev = "png",
dev.args = list(bg = '#FFFFF8'),
dpi = 300,
fig.align = "center",
fig.width = 7,
fig.asp = 0.618,
fig.show = "hold",
out.width = "90%"
)
install.packages("tufte")
knitr::opts_chunk$set(
include = TRUE,
cache = TRUE,
collapse = TRUE,
echo = FALSE,
message = FALSE,
tidy = FALSE,
warning = FALSE,
comment = "  ",
dev = "png",
dev.args = list(bg = '#FFFFF8'),
dpi = 300,
fig.align = "center",
fig.width = 7,
fig.asp = 0.618,
fig.show = "hold",
out.width = "90%"
)
library(tidyverse)
library(rstan)
library(foreach)
library(doParallel)
library(tufte)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#ggplot2 settings
theme_set(theme_minimal())
library(tidyverse)
library(rstan)
library(foreach)
library(doParallel)
library(tufte)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#ggplot2 settings
theme_set(theme_minimal())
knitr::opts_chunk$set(
include = TRUE,
cache = TRUE,
collapse = TRUE,
echo = FALSE,
message = FALSE,
tidy = FALSE,
warning = FALSE,
comment = "  ",
dev = "png",
dev.args = list(bg = '#FFFFF8'),
dpi = 300,
fig.align = "center",
fig.width = 7,
fig.asp = 0.618,
fig.show = "hold",
out.width = "90%"
)
true_fit <- stan(file='true_data_generating_process.stan', iter=1,
chains=1, algorithm="Fixed_param")
yobs = extract(true_fit)$y[1,]
Nobs = length(yobs)
yobs <- as.data.frame(yobs)
# You should do something to clean up ggplot
head(yobs)
ggplot(data = yobs, aes(x=yobs)) +
geom_histogram(binwidth = 1) +
xlab("Alpha Decay Events") +
ylab("Count")
joint_ensemble_data = list(Nobs = Nobs)
joint_ensemble_fit <- stan(file='sample_joint_ensemble.stan', data=joint_ensemble_data,
iter=1000, warmup=0, chains=1,
algorithm="Fixed_param")
joint_ensemble_df <- as.data.frame(joint_ensemble_fit)
head(joint_ensemble_df)
ggplot(data = joint_ensemble_df, aes(x=lam)) +
geom_histogram(bins = 45)
postpred_data = list(Nobs = Nobs,
yobs = yobs$yobs)
postpred_fit <- stan(file='fit_data.stan', data=postpred_data,
iter=1000, chains=4, seed=4838282, control=list(adapt_delta=0.99))
postpred_data = list(Nobs = Nobs,
yobs = yobs$yobs)
postpred_fit <- stan(file='fit_data.stan', data=postpred_data,
iter=1000, chains=4, seed=4838282, control=list(adapt_delta=0.99))
pairs(postpred_fit, pars = c('lam', 'ypred[1]'))
postpred_df <- as.data.frame(postpred_fit)
ggplot(data = postpred_df, aes(x=lam)) +
geom_histogram(bins=40)
head(postpred_df)
postpred_summary = as.data.frame(summary(postpred_fit))
head(postpred_summary)
true_fit <- stan(file='true_data_generating_process.stan', iter=1,
seed=425435, chains=1, algorithm="Fixed_param")
yobs = extract(true_fit)$y[1,]
Nobs = length(yobs)
yobs <- as.data.frame(yobs)
# You should do something to clean up ggplot
head(yobs)
ggplot(data = yobs, aes(x=yobs)) +
geom_histogram(binwidth = 1) +
xlab("Alpha Decay Events") +
ylab("Count")
library(tidyverse)
library(rstan)
library(foreach)
library(doParallel)
library(tufte)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#ggplot2 settings
theme_set(theme_minimal())
library(tidyverse)
library(rstan)
library(foreach)
library(doParallel)
library(tufte)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#ggplot2 settings
theme_set(theme_minimal())
true_fit <- stan(file='true_data_generating_process.stan', iter=1,
seed=425435, chains=1, algorithm="Fixed_param")
yobs = extract(true_fit)$y[1,]
Nobs = length(yobs)
yobs <- as.data.frame(yobs)
# You should do something to clean up ggplot
head(yobs)
ggplot(data = yobs, aes(x=yobs)) +
geom_histogram(binwidth = 1) +
xlab("Alpha Decay Events") +
ylab("Count")
yobs = extract(true_fit)$y[1,]
Nobs = length(yobs)
yobs <- as.data.frame(yobs)
# You should do something to clean up ggplot
head(yobs)
ggplot(data = yobs, aes(x=yobs)) +
geom_histogram(binwidth = 1) +
xlab("Alpha Decay Events") +
ylab("Count")
joint_ensemble_data = list(Nobs = Nobs)
joint_ensemble_fit <- stan(file='sample_joint_ensemble.stan', data=joint_ensemble_data,
iter=1000, warmup=0, chains=1,
algorithm="Fixed_param")
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% d
identical(s, d)
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% d
identical(s, d)
head(s)
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% d
identical(s, d)
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% d
head(s)
head(d)
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(dd=iter(d, by='row'), .combine=rbind) %dopar% dd
head(s)
head(d)
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(dd=iter(d, by='row'), .combine=rbind) %dopar% dd
identical(s,d)
s <- foreach(simu_list=iter(joint_ensemble_df, by='row'), .combine=rbind) %dopar% simu_list
head(simu_list)
s <- foreach(simu_list=iter(joint_ensemble_df, by='row'), .combine=rbind) %dopar% {
simu_lambda = simu_list$lam
simu_ys = simu_list(2:)
s <- foreach(simu_list=iter(joint_ensemble_df, by='row'), .combine=rbind) %dopar% {
simu_lambda = simu_list$lam
simu_ys = simu_list(2:,)
s <- foreach(simu_list=iter(joint_ensemble_df, by='row'), .combine=rbind) %dopar% {
simu_lambda = simu_list$lam
simu_ys = simu_list[2:,]
s <- foreach(simu_list=iter(joint_ensemble_df, by='row'), .combine=rbind) %dopar% {
simu_lambda = simu_list$lam
simu_ys = simu_list[2:]
s <- foreach(simu_list=iter(joint_ensemble_df, by='row'), .combine=rbind) %dopar% {
simu_lambda = simu_list$lam
simu_ys = simu_list[2:len(simu_list)]
}
s <- foreach(simu_list=iter(joint_ensemble_df, by='row'), .combine=rbind) %dopar% {
simu_lambda = simu_list$lam
simu_ys = simu_list[2:length(simu_list)]
}
s <- foreach(simu_list=iter(joint_ensemble_df, by='row'), .combine=rbind) %dopar% {
simu_lambda = simu_list$lam
simu_ys = simu_list[2:length(simu_list)]
}
head(s)
s <- foreach(simu_list=iter(joint_ensemble_df, by='row'), .combine=rbind) %dopar% {
simu_lambda = simu_list$lam
#simu_ys = simu_list[2:length(simu_list)]
}
head(s)
s <- foreach(simu_list=iter(joint_ensemble_df, by='row'), .combine=rbind) %dopar% {
simu_lambda = simu_list$lam
simu_ys = simu_list[2:length(simu_list)]
}
head(simu_lambda)
